name:? zEditor
Zeditor

Component Picker Plugin?
smarter regex ? 
reduce? + callbacks, if (true) early return.
all-regular-expressions: for example /3x => 3x1, 3x2, 3x3 ... table, and quit early

MarkdownTransformer

# own text editor
1. Implementing Rich Text Features
Determine which rich text features are essential for your editor (e.g., bold, italic, underline, lists, links, images) and implement them systematically. This involves:

Creating toolbar components with buttons to toggle these styles.
Handling command execution to apply the selected styles to the text.
Defining commands that modify the processedProps based on the current selection and desired action.
2. Managing Editor State
The core of your editor is its internal state (processedProps), which represents the document structure. Efficiently managing this state is crucial:

Ensure that every change within the contentEditable div is captured and accurately reflected in your state.
Consider using a library like Immer for immutable state updates, which can simplify complex state manipulations.
Implement a mechanism for undo and redo actions.
3. Custom Selection and Cursor Management
While contentEditable takes care of basic cursor and selection behaviors, you may need finer control for certain features:

Track the current selection range within the editor.
Implement custom behaviors for text selection, especially if you're handling custom elements like images or embeds that require special interaction models.
4. Handling Paste Events
Pasted content can bring unwanted styles or elements into your editor:

Intercept paste events (onPaste) to sanitize the input, stripping out unsupported styles or elements and transforming the content to match your editor's model.
5. Implementing Serialization and Deserialization
For saving and loading content:

Define a serialization format for saving your editor's state to a database or file. This might be HTML, Markdown, or a custom JSON structure.
Implement deserialization logic to load and parse saved content back into your editor's state structure.
6. Accessibility and Usability
Ensure your editor is accessible and user-friendly:

Add keyboard shortcuts for common actions.
Ensure that your editor and its controls are accessible to screen readers and support keyboard navigation.
7. Optimization and Testing
Optimize performance, particularly for large documents or complex rendering logic.
Write unit and integration tests to cover key functionalities and ensure that changes don’t introduce regressions.
8. Review and Research
Continuously review your editor's design and code against best practices.
Study existing open-source editors (e.g., Slate.js, Quill, Draft.js) to understand their architectures and solutions to common problems.

action base trigger:
up / down arrow
space & enter case issue
space ?? ignore it for now?:
  ? ignore?
    up/down interaction, space / enter is natural.
  trigger expansion?
  regular typing ' '

setAction --> feedback loop

consume once schema? framework?

try approach:
with / => {
  type: 'dropdown',
  meta: { ... data  },
  children: [
    {
      text: ''
    }
  ]
}
void element?

=> Customized Escape, with Escape key => convert it to strign `/` plus some text?

=> need to fully customzied
popoup的默认位置，就不够自然
而且自己要考虑是放上面还是放下面——根据用户现在的位置，智能调整——》所以的跳出的内容可以scroll

/(empty) => headings, basic blocks
* interactable => headings => expand to h1 ~ h6
*   basic blocks => all blocks available

/h => headings only
/h1, h2, h3, h4, h5, h6
/heading1, heading2, heading3, heading4, heading5, heading6
/heading 1, heading 2, heading 3, heading 4, heading 5, heading 6
smart match?

/p /paragraph /text
/blockquote
/list
/order list
/unordered list
/check-list
/checklist
/numbered list
/ol
/ul

/
only => default dropdown
* should be interactable..

/ + Escape = ignore this / only

slash dropdown
/p, /paragraph,
/blockquote
/list-item
/bold, /underline, /strike, /code, /heading, /link

smart match
/code-jsx
/code-js
/code-c
/code python

key tab, enter interaction, ctrl + k smart retrigger
let's say, I typed /code, then press Escape by accident
if I press ctrl + k, with cursor after it, it would smartly retrigger dropdown

select text, start with /, it could smartly retrigger dropdown 

/split, (2, 3, 4, ...)
configurable, could expand, collapsed

bugfix:
with text selection, using left, right cursor is not intuitive

?
/timeline

smart collect #hash tags on meta data

/notification
database sync

color font
color background

adding drag & drop to relocate element
https://dev.to/devterminal/slatejs-dnd-kit-improving-rich-text-editor-ux-by-adding-drag-and-drop-23d3

future todo:
link的那种ctrl + k toggle不够好
应该是 {type: 'link', url: <link>, chilcren: [{text: <text>}]}
再加上 {showPopup: boolean}
然后数据库做persistence的时候, showPopup不应该保存——》没必要
读取的时候再只能赋予 {showPopup: false}的初始值这样

sticky note?
可以隐藏？甚至是编辑器本身都可以是多个？不同的panel？

生成式 ui
https://github.com/vercel-labs/ai-sdk-preview-rsc-genui

table of contents:
https://github.com/facebook/lexical/blob/main/packages/lexical-playground/src/plugins/TableOfContentsPlugin/index.tsx

context menu (right click menu)
https://github.com/facebook/lexical/blob/main/packages/lexical-playground/src/plugins/ContextMenuPlugin/index.tsx

markdown convert
https://github.com/facebook/lexical/blob/main/packages/lexical-playground/src/plugins/ActionsPlugin/index.tsx#L170
